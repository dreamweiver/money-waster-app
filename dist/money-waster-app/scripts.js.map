{"version":3,"sources":["webpack:///node_modules/simple-web-notification/web-notification.js"],"names":[],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,SAAS;AACpB;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,wCAAwC;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,UAAU;AAC3B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,yBAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2BAA2B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB,eAAe,OAAO;AACtB,eAAe,yBAAyB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,UAAU;AACV;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA,sBAAsB;AACtB,cAAc;AACd;AACA,UAAU;AACV,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,kCAAkC;AAClC,wBAAwB;AACxB;AACA,gBAAgB;AAChB,YAAY;AACZ,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA,CAAC","file":"scripts.js","sourcesContent":["/*global module: false, define: false */\n\n/**\n * 'showNotification' callback.\n *\n * @callback ShowNotificationCallback\n * @param {error} [error] - The error object in case of any error\n * @param {function} [hide] - The hide notification function\n */\n\n/**\n * 'requestPermission' callback.\n *\n * @callback PermissionsRequestCallback\n * @param {Boolean} granted - True if permission is granted, else false\n */\n\n/**\n * A simplified web notification API.\n *\n * @name webNotification\n * @namespace webNotification\n * @author Sagie Gur-Ari\n */\n\n/**\n * Initializes the web notification API.\n *\n * @function\n * @memberof! webNotification\n * @alias webNotification.initWebNotification\n * @private\n * @param {Object} global - The root context (window/global/...)\n * @param {function} factory - Returns a new instance of the API\n * @returns {Object} New instance of the API\n */\n(function initWebNotification(global, factory) {\n    'use strict';\n\n    /*istanbul ignore next*/\n    var NotificationAPI = global.Notification || window.Notification;\n\n    var webNotification = factory(NotificationAPI);\n\n    /**\n     * Initializes the web notification API (only used for testing).\n     *\n     * @function\n     * @memberof! webNotification\n     * @alias webNotification.initWebNotificationFromContext\n     * @private\n     * @param {Object} context - The root context (window/global/...)\n     * @returns {Object} New instance of the API\n     */\n    webNotification.initWebNotificationFromContext = function (context) {\n        return initWebNotification(context, factory);\n    };\n\n    if ((typeof define === 'function') && define.amd) {\n        define(function defineLib() {\n            return webNotification;\n        });\n    } else if ((typeof module === 'object') && module.exports) {\n        module.exports = webNotification;\n    } else {\n        global.webNotification = webNotification;\n    }\n\n    return webNotification;\n}(this, function initWebNotification(NotificationAPI) {\n    'use strict';\n\n    var tagCounter = 0;\n\n    var webNotification = {};\n\n    /**\n     * The internal Notification library used by this library.\n     *\n     * @memberof! webNotification\n     * @alias webNotification.lib\n     * @private\n     */\n    webNotification.lib = NotificationAPI;\n\n    /**\n     * True to enable automatic requesting of permissions if needed.\n     *\n     * @member {Boolean}\n     * @memberof! webNotification\n     * @alias webNotification.allowRequest\n     * @public\n     */\n    webNotification.allowRequest = true; //true to enable automatic requesting of permissions if needed\n\n    /*eslint-disable func-name-matching*/\n    Object.defineProperty(webNotification, 'permissionGranted', {\n        /**\n         * Returns the permission granted value.\n         *\n         * @function\n         * @memberof! webNotification\n         * @private\n         * @returns {Boolean} True if permission is granted, else false\n         */\n        get: function getPermission() {\n            var permission = NotificationAPI.permission;\n\n            /**\n             * True if permission is granted, else false.\n             *\n             * @memberof! webNotification\n             * @alias webNotification.permissionGranted\n             * @public\n             */\n            var permissionGranted = false;\n            if (permission === 'granted') {\n                permissionGranted = true;\n            }\n\n            return permissionGranted;\n        }\n    });\n    /*eslint-enable func-name-matching*/\n\n    /**\n     * Empty function.\n     *\n     * @function\n     * @memberof! webNotification\n     * @alias webNotification.noop\n     * @private\n     * @returns {undefined} Undefined\n     */\n    var noop = function () {\n        return undefined;\n    };\n\n    /**\n     * Checks if web notifications are permitted.\n     *\n     * @function\n     * @memberof! webNotification\n     * @alias webNotification.isEnabled\n     * @private\n     * @returns {Boolean} True if allowed to show web notifications\n     */\n    var isEnabled = function () {\n        return webNotification.permissionGranted;\n    };\n\n    /**\n     * Displays the web notification and returning a 'hide' notification function.\n     *\n     * @function\n     * @memberof! webNotification\n     * @alias webNotification.createAndDisplayNotification\n     * @private\n     * @param {String} title - The notification title text (defaulted to empty string if null is provided)\n     * @param {Object} options - Holds the notification data (web notification API spec for more info)\n     * @param {String} [options.icon=/favicon.ico] - The notification icon (defaults to the website favicon.ico)\n     * @param {Number} [options.autoClose] - Auto closes the notification after the provided amount of millies (0 or undefined for no auto close)\n     * @param {function} [options.onClick] - An optional onclick event handler\n     * @param {Object} [options.serviceWorkerRegistration] - Optional service worker registeration used to show the notification\n     * @param {ShowNotificationCallback} callback - Invoked with either an error or the hide notification function\n     */\n    var createAndDisplayNotification = function (title, options, callback) {\n        var autoClose = 0;\n        if (options.autoClose && (typeof options.autoClose === 'number')) {\n            autoClose = options.autoClose;\n        }\n\n        //defaults the notification icon to the website favicon.ico\n        if (!options.icon) {\n            options.icon = '/favicon.ico';\n        }\n\n        var onNotification = function (notification) {\n            //add onclick handler\n            if (options.onClick && notification) {\n                notification.onclick = options.onClick;\n            }\n\n            var hideNotification = function () {\n                notification.close();\n            };\n\n            if (autoClose) {\n                setTimeout(hideNotification, autoClose);\n            }\n\n            callback(null, hideNotification);\n        };\n\n        var serviceWorkerRegistration = options.serviceWorkerRegistration;\n        if (serviceWorkerRegistration) {\n            delete options.serviceWorkerRegistration;\n\n            if (!options.tag) {\n                tagCounter++;\n                options.tag = 'webnotification-' + Date.now() + '-' + tagCounter;\n            }\n            var tag = options.tag;\n\n            serviceWorkerRegistration.showNotification(title, options).then(function onCreate() {\n                serviceWorkerRegistration.getNotifications({\n                    tag: tag\n                }).then(function notificationsFetched(notifications) {\n                    if (notifications && notifications.length) {\n                        onNotification(notifications[0]);\n                    } else {\n                        callback(new Error('Unable to find notification.'));\n                    }\n                }).catch(callback);\n            }).catch(callback);\n        } else {\n            var instance;\n            try {\n                instance = new NotificationAPI(title, options);\n            } catch (error) {\n                callback(error);\n            }\n\n            //in case of no errors\n            if (instance) {\n                onNotification(instance);\n            }\n        }\n    };\n\n    /**\n     * Returns an object with the show notification input.\n     *\n     * @function\n     * @memberof! webNotification\n     * @alias webNotification.parseInput\n     * @private\n     * @param {Array} argumentsArray - An array of all arguments provided to the show notification function\n     * @returns {Object} The parsed data\n     */\n    var parseInput = function (argumentsArray) {\n        //callback is always the last argument\n        var callback = noop;\n        if (argumentsArray.length && (typeof argumentsArray[argumentsArray.length - 1] === 'function')) {\n            callback = argumentsArray.pop();\n        }\n\n        var title = null;\n        var options = null;\n        if (argumentsArray.length === 2) {\n            title = argumentsArray[0];\n            options = argumentsArray[1];\n        } else if (argumentsArray.length === 1) {\n            var value = argumentsArray.pop();\n            if (typeof value === 'string') {\n                title = value;\n                options = {};\n            } else {\n                title = '';\n                options = value;\n            }\n        }\n\n        //set defaults\n        title = title || '';\n        options = options || {};\n\n        return {\n            callback: callback,\n            title: title,\n            options: options\n        };\n    };\n\n    /**\n     * Triggers the request permissions dialog in case permissions were not already granted.\n     *\n     * @function\n     * @memberof! webNotification\n     * @alias webNotification.requestPermission\n     * @public\n     * @param {PermissionsRequestCallback} callback - Called with the permissions result (true enabled, false disabled)\n     * @example\n     * ```js\n     * //manually ask for notification permissions (invoked automatically if needed and allowRequest=true)\n     * webNotification.requestPermission(function onRequest(granted) {\n     *  if (granted) {\n     *      console.log('Permission Granted.');\n     *  } else {\n     *      console.log('Permission Not Granted.');\n     *  }\n     * });\n     * ```\n     */\n    webNotification.requestPermission = function (callback) {\n        if (callback && typeof callback === 'function') {\n            if (isEnabled()) {\n                callback(true);\n            } else {\n                NotificationAPI.requestPermission(function onRequestDone() {\n                    callback(isEnabled());\n                });\n            }\n        }\n    };\n\n    /**\n     * Shows the notification based on the provided input.<br>\n     * The callback invoked will get an error object (in case of an error, null in\n     * case of no errors) and a 'hide' function which can be used to hide the notification.\n     *\n     * @function\n     * @memberof! webNotification\n     * @alias webNotification.showNotification\n     * @public\n     * @param {String} [title] - The notification title text (defaulted to empty string if null is provided)\n     * @param {Object} [options] - Holds the notification data (web notification API spec for more info)\n     * @param {String} [options.icon=/favicon.ico] - The notification icon (defaults to the website favicon.ico)\n     * @param {Number} [options.autoClose] - Auto closes the notification after the provided amount of millies (0 or undefined for no auto close)\n     * @param {function} [options.onClick] - An optional onclick event handler\n     * @param {Object} [options.serviceWorkerRegistration] - Optional service worker registeration used to show the notification\n     * @param {ShowNotificationCallback} [callback] - Called after the show is handled.\n     * @example\n     * ```js\n     * //show web notification when button is clicked\n     * document.querySelector('.some-button').addEventListener('click', function onClick() {\n     *   webNotification.showNotification('Example Notification', {\n     *     body: 'Notification Text...',\n     *     icon: 'my-icon.ico',\n     *     onClick: function onNotificationClicked() {\n     *       console.log('Notification clicked.');\n     *     },\n     *     autoClose: 4000 //auto close the notification after 4 seconds (you can manually close it via hide function)\n     *   }, function onShow(error, hide) {\n     *     if (error) {\n     *       window.alert('Unable to show notification: ' + error.message);\n     *     } else {\n     *       console.log('Notification Shown.');\n     *\n     *       setTimeout(function hideNotification() {\n     *         console.log('Hiding notification....');\n     *         hide(); //manually close the notification (you can skip this if you use the autoClose option)\n     *       }, 5000);\n     *     }\n     *   });\n     * });\n     *\n     * //service worker example\n     * navigator.serviceWorker.register('service-worker.js').then(function(registration) {\n     *     document.querySelector('.some-button').addEventListener('click', function onClick() {\n     *         webNotification.showNotification('Example Notification', {\n     *             serviceWorkerRegistration: registration,\n     *             body: 'Notification Text...',\n     *             icon: 'my-icon.ico',\n     *             actions: [\n     *                 {\n     *                     action: 'Start',\n     *                     title: 'Start'\n     *                 },\n     *                 {\n     *                     action: 'Stop',\n     *                     title: 'Stop'\n     *                 }\n     *             ],\n     *             autoClose: 4000 //auto close the notification after 4 seconds (you can manually close it via hide function)\n     *         }, function onShow(error, hide) {\n     *             if (error) {\n     *                 window.alert('Unable to show notification: ' + error.message);\n     *             } else {\n     *                 console.log('Notification Shown.');\n     *\n     *                 setTimeout(function hideNotification() {\n     *                     console.log('Hiding notification....');\n     *                     hide(); //manually close the notification (you can skip this if you use the autoClose option)\n     *                 }, 5000);\n     *             }\n     *         });\n     *     });\n     * });\n     * ```\n     */\n    webNotification.showNotification = function () {\n        //convert to array to enable modifications\n        var argumentsArray = Array.prototype.slice.call(arguments, 0);\n\n        if ((argumentsArray.length >= 1) && (argumentsArray.length <= 3)) {\n            var data = parseInput(argumentsArray);\n\n            //get values\n            var callback = data.callback;\n            var title = data.title;\n            var options = data.options;\n\n            webNotification.requestPermission(function onRequestDone(granted) {\n                if (granted) {\n                    createAndDisplayNotification(title, options, callback);\n                } else {\n                    callback(new Error('Notifications are not enabled.'), null);\n                }\n            });\n        }\n    };\n\n    return webNotification;\n}));\n"],"sourceRoot":""}